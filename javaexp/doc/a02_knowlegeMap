#자바의 지식체계
1. 초기 핵심적/기초부터 시작해서, 점점 확대해 가는 방식으로 수업 진행
	- 계열화 된 내용을 조금씩 살을 붙여가면서, 내용을 설명하고, 실습예제를 진행하는 방식
	- 일주일 한번 전체 내용 살펴보기. 진도에 따른 기본 코드
	
2. java 프로그램 설치
	jdk
	eclipse
	프로젝트 만들기..
	# 백업 방법: C:\a01_javaexp\workspace\javaexp 폴더를 활용
	file ==> import ==> general
	
3. java에 대한 이해
	1) java의 특징
		- platform (OS) 독립적: 운영체제 상관없이 실행 가능
		- 객체 지향적인 프로그램
		- 메모리 관리를 자동으로 해준다(jvm)
	2) 실행과정
		- java -> .class -> 실행 결과
	3) 기본 입력과 출력
		System.out.println("출력할 문자열-줄 바꿈포함");
		System.out.println("문자열" + "문자열"); // 문자열을 이어 주어 출력
		System.out.print(); // 줄 바꿈 없이 출력
		\n, \t
		
		Scanner sc = new Scanner(System.in);
		Scanner: console을 통해 입력하는 내용을 처리해줄 수 있는 자바 내부의 api 객체
		new Scanner(System.in): 객체를 생성
		System.in: 기본적인 입력을 처리한ㄴ Stream 객체를 생성자의 매개변수로 받아들이고 있다.
	
4. 에러 잡기
	1) main()에서 수행 : class 만들 때, main메서드 check 반드시 할 것
	2) 명령어는 대소문자 구분하여야 한다
	3) 클래스명 객체 대문자로 하여야 한다
	4) 마지막 명령어 끝에는 ;(세미콜론)이 있어야 한다
		- 선언할 때는 중괄호 블럭을 사용하여 세미콜론을 쓰면 안된다.
			Person(String name); {} (X) ==> Person(String name){}
			void call();{} (X) ==> void call(){}
		- 호출시에 ;을 사용한다.
			Person p = new Person("홍길동");
			p.call();
			
	5) 코드는 {}(중괄호) 단위로 계층적으로 코딩하여야 하며, 반드시 시작과 마지막에 주의 하여야 한다
		특히, 탭 간격을 잘 황용하여야 한다. (중요***)
		- 괄호는 시작/끝 먼저 마들고, 피룡에 따라 사이에 커서를 위치시킨 후에 enter키로 입력하여 코드를 처리한다
			ex) 프로그램에서 사용되는 괄호는 가능한한 먼저 시작과 끝을 만들고, 중간에 삽입하는 형식으로 진행
			() : 소괄호, 매개변수를 ㅣㅇㅂ력처리할 때, 활용
			Person(String name){
			
			}
			for(int num01=1;num01<=25;num01++){
			
			}
			{} : 중괄호, 클래스명/생성자/메서드에 범위를 지정하고, 조건/반복문에서 주로 활용된다
				int[] arry = {1000,2000,3000}; // 자바에서만 데이터 선언 할당 시 중괄호를 이용
			[] : 대괄호, 주로 배열에서 호출할 때 사용된다
				arry[10]=500;
			- 클래스/메서드/생성자/조건/반복문에 사용할 때, 계층을 탭 간격으로 구분하여 사용하는 것이 가독성이 좋고, 에러를 찾기에도 손쉽다
			 	class Person{
			 		// 종속된 구성 요소들은 탭 간격으로 계층 하위라는 것을 표시한다.
			 		int age;
			 		String name;
			 		void call(){
			 			// 하위에 종속된 내용도 탭 간격으로 종속을 나타낸다
			 			age = 25;
			 			if(age>=20){
			 				//조건문에도 종속을 표기하여 처리한다.
			 				System.out.println("성인");
			 			}
			 		}
			 	}
		
5. 변수와 타입
	1) 변수의 선언과 할당
		//숫자형
		int num01;
		num01 = 25;
		// 문자열은 객체이면, 객체형 데이터는 대문자로 시작한다
		String name = "홍길동";
	
	2) 데이터 타입
		기본데이터 유형
			정수형 : byte, short, **int, long , char(문자)
				int <==> char : 문자는 unicode값으로 연결되어, 데이터유형 변환에 의해서 
								해당 문자 또는 코드 값인 정수 데이터를 확인할 수 있다.
			실수형 : float, **double
				소수점 이하의 데이터까지 할당하여 처리할 수 있다.
			boolean : true / false
		객체형 유형
			배열형: int[] arry={100,200,300};
			내장된 api객체 : ArrayList, String, Map
			사용자 정의 객체 :클래스로 정의
			cf) 메모리 : stack에서 선언과 할당
				객체유형: heap영역에 할당(객체생성), stack에서 heap영역의 주소값을 할당
				cf) 도서관의 검색 pc - 어디에 책이 있는지를 가르쳐준다(stack영역)
					실제 위치한 도서(heap영역)
	3) 타입의 변경
		작은 데이터 유형 -> 큰 데이터 유형
		큰 데이터 유형 -> 작은 데이터 유형
		숫자 -> 문자열
			wrapper클래스에서 toString() 활용
			""+25 = "25" 문자열로 변경
		문자열 -> 숫자
			"25" + "30" ==> "2530"
			Integer.parseInt("25") + Integer.parseInt("30")
				25+30 ==> 55

6. 연산자
	1) 연산자와 연산식
		산술연산자
		대입연산자
		비교연산자
		논리연산자
	2) 연산자의 우선순위
	
	
7. 조건문과 반복문
	1) 코드 흐름제어
	2) 조건문
		if(조건){
		
		}
	3) 반복문
		for(초기값; 조건식; 증감식;){
		
		}
	4) continue/break;
		ex) for(int cnt=1; cnt<=10; cnt++){
				if(cnt==5) {
					continue;
				}
				System.out.println(cnt); //5만 출력되지 않고 1~10까지 출력
			}
			
		ex) for(int cnt=1; cnt<=10; cnt++){
				if(cnt==5) {
					break;
				}
				System.out.println(cnt); // 5 이후 내용을 출력하지 않는다
			}
===============================================================================				
8. 메모리사용
	1) stack 영역과 heap 영역에 대한 이해 
		stack 영역 : 작은 메모리 - 크기가 고정되어 있는 데이터 유형(int,double,char,String 등등...)이나, 객체의 경우 heap 영역이 주소값
		heap 영역: 객체가 저장되는 메모리
				  배열이나 객체형태로 크기가 커질 수 있는 데이터 유형이 실제 저장되는곳
	2) 기본 데이터 유형
	3) 객체 유형
		stack영역에 객체의 heap영역의 주소
		heap영역은 실제 객체가 할당
	4) 배열
		배열의 선언
			데이터 유형[] 배열명;
			ex) int[] arry;
		배열의 객체 생성
			배열명 = new 데이터유형[배열의 크기];
			ex) arry = new int[3];
		배열의 데이터 할당
			배열은 index 단위로 데이터를 할당 할 수 있다
			arry[0] = 25;
			arry[1] = 30;
			arry[2] = 5;
	
9. 클래스
	1) 클래스와 객체와의 관계
		실제 객체 지향적인 자바 프로그램의 가장 근간되는 객체를 만들기 위한 설계도 역할이 클래스이다.
		왜? 객체 지향적인 프로그램을 쓸까?
			기억/판단/헹동
			object 지향적인 프로그램에서 핵심적인 구성요소..
			기억(메모리): 필드
			판단/행동: 메서드
			위에 있는 객체를 설계도를 만들어서 객체를 생성하는 기준을 설정하는 코드를 클래스라고 한다
		
		클래스는 소스코드 그 자체로는 binary파일(기계언어)로 까지만 만들어진다.
		실행을 하려면 main() 메서드가 있는 곳에서 호출하여야 한다
		클래스를 통해 생성자로 만들어진 것을 객체라고 한다 
		
	2) 클래스 구성요소
		- 저장하는 데이터를 할당하는 곳 : 필드
			일반적으로 필드는 private로 설정하여 외부에서 접근을 하지 못하게 한다
		- 외부에 있는 데이터를 입력받거나 특정한 기능을 처리하는 것 : 생성자/메서드
			생성자 : 클래스와 동일하여 외부의 데이터를 필드에 할당하는 역할을 한다
			main()
				Person p1 = new Person("홍길동"); // 생성자 호출
			
			class Person{
				String name;
				// 생성자를 선언
				Person(String name){
					this.name = name; // this는 입력받는 변수와 구분하기 위해서 사용한다			
				}		
			}
			Person p01 = new Person("홍길동");
			String name = p01.getName(25); // "성인:홍길동"이 메소드를 통해 전달되고 그것을 name에 할당한다.
			
			메서드 : 외부에 데이터를 입력 받아 기능적인 처리를 한다 
				- 리턴 유형 : 마지막에 리턴할 데이터 유형
				- 매개변수 : 실제 호출 되었을 때, 전달할 데이터의 유형을 선언한다
				- 프로세스 처리 : 조건문, 할당 처리
				- 실제 리턴 값 : 해당 메서드가 호출된 곳에 전달할 데이터
				
				메서드와 생성자 오버로딩 개념
					- 클래스의 구성요소에 있어서, 선언시 동일한 이름 사용하지 못하는데,
						생성자와 메서드에 동일한 이름으로 선언할 수 있는 규칙이 있다
					- 이 때는 매개변수에 의해 영향을 받는다
					- 외부에 매개변수에 의해 식별이 가능하기에 오버로딩(중복정의)가 가능하다
						Person p01 = new Person("홍길동");
						Person p02 = new Person(25);
						Person p03 = new Person("홍길동",25);
						Person p04 = new Person(25,"홍길동");
						
				
			3) static과 final
				static : 객체들의 공유 메모리 영역
				final : 클래스명 앞에, 필드명 앞에, 메서드명 앞
					필드명 : 변수를 상수화한다
					
			4) 접근 제어자 : 클래스 구성요소에 대한 접근을 제한되게 처리할 수 있는 제어자..
				private, default(접근 제어자를 선언하지 않음), protected, public
				encapsulation : 객체에 구성요소에 접근제한을 두어, 외부의 호출에 대하여 접근을 제한하는
								oop(객체지향프로그래밍)의 핵심 개념중 하나이다
		
10. 상속
	1) 기본 상속
		객체를 상속 관계로 설정해서 사용할 것을 말한다.
		class Father{
			String name;
			int height=170;
			
			String getName(){
				return name;
			}
		}
		class Son extends Father{
			int weight = 70;	
		}
		main()
		Son s1 = new Son();
		s1.height; // 상속 받은 Father 클래스의 변수
		s1.getName()
		s1.weight
		
	2) 메소드 재정의
		상위에 선언한 메서드를 다시 정의하여 사용하는 것을 말한다
		
	3) 다형성
		상위 클래스의 내용을 여러가지 형태로 다양하게 만들어지게 하는 것을 말한다
		
	4) 추상 클래스
		추상적인 메서드가 정의 되었을 때, 사용되는 클래스를 말한다
		추상 메서드와 일반 메서드가 공존한다
		
	5) 인터페이스

============================== 기초 완료
api에 있는 내용 활용======================
	
11. 예외처리..
	1) 프로그래밍에서 실행 에러가 발생 시, 정상적으로 수행이 될 수 있게끔
		예외에 대비해서 코딩을 하는 것을 말한다
		try{
			예외가 나올만한 코드..
		}catch(Exception e){
			예외가 나왔을 때, 처리할 내용..
		}finally{
		
		}
	2) 예외 처리
		- 필수 예외 처리(컴파일 예외)
		- 실행파일 예외처리 
		
12. 기본 API 클래스		 
	1) 자바의 api 도큐먼트
	2) String (문자열)
		equals, concat, replace()
	3) Wrapper 클래스
		기본 데이터 유형을 변형하여 기능적인 처리가 필요할 때, 객체화해서 메서드를 사용하게 하는 것을 말한다
		byte ==> Byte
		int ==> Integer
	4) Math 수학적 함수처리.
		random() : 
	
13. 쓰레드
	한번에 여러가지 요청을 처리하는 프로그래밍 방식 중 하나이다.
	하나의 프로그램에서 여러개의 처리가 한번에 가능하게 한다.
	ex) 웹 서버 프로그램
	time slice
		

14. 제너릭
	자바는 Object가 최상위 클래스, 다양한 객체를 받을 수 있는데,
	이것을 특정 객체로 고정화하여 처리하는 방법

15. 람다식

16. 컬렉션 프레임워크
	List : 선형 리스트형 컬렉션 프레임 워크
			동적인 배열을 지원하는 객체
	Set : 중복 불가 순서 지키지 못하는 컬렉션 프레임 워크
	Map : Key/value형 프레임 워크

17. 스트림
	데이터의 입출력을 처리하는 객체
	기본 스트림 내용에서 file에 대한 처리

18. 알고리즘
	1) 조건에 따른 알고리즘
	2) 최대/최소값
	3) 정렬처리..
	
# 객체를 사용 및 처리하기 위한 지식 계열화
1. 기본 데이터 유형에 대한 선언과 할당을 할 수 있는가?
2. 변수를 사용했을 때, 나오는 에러의 유형을 알고 있는가?
3. 기본 데이터 유형과 객체형 데이터 유형을 구분할 수 있는가?
4. 클래스와 객체의 차이점을 알고 있는가?
5. 기능 메서드의 구성요소별로 기능을 알고, 실제 여러가지 경우에 코드를 할 수 있는가?
	1) 리턴값
	2) 매개변수
	3) 프로세스 처리 : 저장, 출력, 경우에 따른 조건/반복문 처리
6. 클래스 각 구성요소를 이해하고 사용할 수 있는가?
	1) 필드
	2) 생성자
	3) 메서드
	4) 각 구성요소들의 복합적 활용
7. 클래스에 선언된 static 변수와 일반 변수의 차이점을 이해하고 사용할 수 있는가?
8. 객체와 객체의 연관관계의 설정을 활용할 수 있는가?
	1) 1:1 객체
	2) 1:다 객체
9. 상속의 개념을 이해하고 활용할 수 있는가?
	 	
	
	
