# 웹프로그래밍에 대한 지식 계열화
1. 웹프로그램의 처리 방식에 대한 이해 
	1)network 처리
		- ip 라는 전세꼐에서 식별할 수 있는 주소를 기준으로 서버와 클라이언트가 접속하여
			데이터의 전송을 통해서 프로그램을 처리
			ip ==>도메인명(@@@.com)
			
		- 서버개념(tomcat-was) : 웹서비스를 제공
			웹서버 :html,css,js
			웹어플리케이션서버 : 웹서버 + 프로그램(java, jsp, php, asp)
		- 클라이언트 개념(브라우저) : 웹서비스를 제공 받는 프로그램
		
	2) 프로그램의 흐름에 대한 이해..
		- url 주소 : 특정한 페이지가 페이지에 연결된 servlet 호출.
		- 요청값 : 위 주소에 해당하는 페이지에 특정한 데이터를 전송할 때, 사용된다
			페이지명?요청키=요청값&요청키2=요청값2
		- 웹서버에서 전달되는 데이터와 화면
			html(css,js,태그)는 그대로 클라이언트에 전송
			jsp(java+html)는 java로 변환가정을 거치고, class, 최종으로 결과 html을 만들어
				클라이언트에 전송
2. 프로그래밍별로 주요 처리 내용에 대한 이해..
	0) 프로그래밍 처리 프로세스
		일단, 모든 프로그래밍의 source는 서버단에 있지만,
		요청에 의해서 실행되는 위치는 아래와 같이 크게 둘로 나누어진다.
		프런트단 프로그램은 블라우저에서 실행되고,
		백앤드단 프로그래은 서버(was)에서 실행된다.
		
	1) front end단(프런트단)
		html :화면을 구성을 한다. 
		메뉴위치 구성, 각각의 태그를 통해서 이미지, 글자, 리스트, 데이터(테이블)을 처리하여
		화면에 보여준다. : 크기나 위치나 디자인에 투박한 기본 속성으로 처리하여야 한다.
		입력form요소(input, select, textarea..)
		ex) <h1 속성="속성값"
		css : html에서의 한계를 극복하게 해준다.
			화면 구성요소와 위치, 크기를 조절하고, 여러가지 선굵기, 모양 등을 활용해서
			세련된 화면을 구성할 수 있게 도와준다.
			전체적인 디자인을 통일화하게 도와준다.
			ex) 상단에 전체적 설정
			요소{속성:속성값;속성2:속성값2;}
			<h1 style="속성:속성값;"
		javascript : html과 css의 정적인 화면구성을 이벤트와 이벤트 함수선언을 통해서
			동적인 처리를 하게 해준다. 궁극적으로 프로그램에서 변수, 객체, 연산자 
			조건/반복문을 활용하여 html/css에서 선언한 모든 코드를 객체화하여 속성과 속성값의
			형태로 변동이 가능하게 해준다. 메모리, 프로그래밍, 모든 태그와 css코드를 
			객체화(DOM)한 내용으로 동적인 처리를 가능하게 한다.
			ex) <h1 속성="속성값"
			var h1Obj = document.querySelector("h1");
			h1Obj.속성="속성값";
			h1Obj.style.속성="속성값"
		ajax(비동기적으로 백앤드단 데이터를 가져오는 처리)
		jquery : lib파일을 이용하여 javascript를 간단한 형식으로 처리해준다
		vue : ajax 기반으로 서버단의 데이터를 효과적으로 javascript 프레임워크를 이용해서
			빠른 속도와 기능적인 확장성으로 처리해준다
	
	2) back end단(백엔드단) - 서버
		java : 백앤드단에서 피룡하는 데이터를 처리할 때 사용(database ==> 객체)하고,
			백앤드단에서 필요로 하는 변수, 메모리설정, 객체처리, 초건/반복문 처리등의 기능과
			내장된 객체를 이용해서 여러가지 프로그램밍적인 처리를 한다.
			DAO(database access object) : java프로그램을 통해서 database 서버에 연결
			VO(value object) : 연결한 후에 가져온 데이터를 객체에 할당 처리
		datebase : 영속적인 데이터를 저장해서 프로그램에 활용할 때, database 서버를 만들어서 
			프로그래밍으로 데이터를 전달 및 활용한다.
		jsp : html + css + javascript + java를 혼합한 코드를 포함해서 컴파일과정을 통해서 
			class 파일을 가지고 있다가 실행에 의해서 front단에 최종 결과 html/css/javascript를
			브라우저에 전달한다.
			servlet 개념, mvc(모델2) 개발패턴, el, jstl 등 횽과적인 웹프로그래밍 방식을 
			만들고 있다. 
		
		spring/spring boot
			위 jsp 프로그램을 가장 많이 사용되는 개발 패턴의 소스를 framework(.jar)로 가지고
			있어서, 최대한 짧은 시간에 웹개발 코드를 개발할 수 있게 도와준다.

3. 통합된 실습 예제 처리..
	1) jsp 파일로
		- html 구현하기
		- css 추가하기
		- javascript 추가하여 화면 처리
		- java코드와 객체를 추가하여 화면 출력하기
		- 요청값을 이용하여 변경되는 요청값에 의해 화면 처리하기.
		- el 태그와 jstl활용해보기.
		- jsp의 MVC 패턴해보기..

4. html의 knowlege Map
	1) html의 구조 
	2) 기본 태그
		글자 
		목록
		테이블
		미디어
	3) 입력 태그(**)
		input
			type="text|password|checkbox|radio" - 기본
			type="number|date|color..." - 확장
		select
		textarea
	4) 공간 분할 태그
		div
		iframe
		frame
		시멘틱태그
	
5. css
	1)활용 범위
	2)기본 형식
		선택자{속성:속성값;}
	3) 종류
		외부호출
		내부페이지선언
		인라인 : <태그 style="속성:속성값;"
	4) 선택자
		- 기본 선택자 : 태그, #아이디명, .클래스
			ex) hi{background:yellow}
				#tab01{border:1px solid blue;}
				.cls01{coloer:green;}
		- 속성 선택자 : 기본선택자[속성=속성값]
			ex) input[type=password]{background:yellow;}
		- 계층형 선택자(후손/자손 선택자)
			상위계층 하위계층{coloer:green;}
			ex) table td{background:blue;}
				#tabo1 td{color:green;}
	5) 확장 선택자 
		- 반응형 선택자 : 특정 내용을 반응적으로 처리할 때, 사용되는 선택자
			선택자:hover{background:yellow;}
			
		- 상태 선택자
			선택자:focus{color:blue;}
			ex) input:focus{color:blue;}
				input 요소객체를 클릭시, 해당 글자색상으로 파랑색으로 처리한다.
		- 구조 선택자
			테이블이나 리스트형 데이터에 대하여 특정한 구조에 선택할 때, 사용하는 선택자
			tr:nth-child(2n){background:blue;}
				테이블을 2개 단위로 행의 배경색상으로 파랑색으로 처리
				
6. javascript
	1) 궁극적인 목적인 프로그램을 활용하여 이벤트나 이벤트핸들러를 통해서, 화면에 있는 태그를
		객체로 인식(DOM)하여 필요한 동적기능을 수행하기 위한 것이다.
7. jsp